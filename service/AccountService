package org.example.service;

import org.example.dao.UsuarioDAO;
import org.example.model.Cliente;
import org.example.model.Dueno;

import java.sql.SQLException;

/**
 * AccountService: maneja la creación de cuentas de Cliente y Dueno.
 */
public class AccountService {
    private final UsuarioDAO usuarioDAO;

    public AccountService() throws SQLException {
        this.usuarioDAO = new UsuarioDAO();
    }

    /**
     * Crea un nuevo cliente. Hace validaciones mínimas y delega a UsuarioDAO.
     */
    public void crearCliente(String nombreUsuario, String contrasena,
                             String nombre, String apellido,
                             String correo, double rentaMaxima) throws SQLException {
        if (nombreUsuario == null || nombreUsuario.isBlank()) {
            throw new IllegalArgumentException("El nombre de usuario es obligatorio.");
        }
        if (contrasena == null || contrasena.isBlank()) {
            throw new IllegalArgumentException("La contraseña es obligatoria.");
        }
        if (nombre == null || nombre.isBlank()) {
            throw new IllegalArgumentException("El nombre es obligatorio.");
        }
        if (apellido == null || apellido.isBlank()) {
            throw new IllegalArgumentException("El apellido es obligatorio.");
        }
        if (correo == null || correo.isBlank()) {
            throw new IllegalArgumentException("El correo es obligatorio.");
        }
        if (rentaMaxima < 0) {
            throw new IllegalArgumentException("La renta máxima no puede ser negativa.");
        }

        Cliente c = new Cliente(0, nombreUsuario, contrasena, nombre, apellido, correo, "CLIENTE", rentaMaxima);
        usuarioDAO.insertarCliente(c);
    }

    /**
     * Crea un nuevo dueño. Hace validaciones mínimas y delega a UsuarioDAO.
     */
    public void crearDueno(String nombreUsuario, String contrasena,
                           String nombre, String apellido,
                           String correo) throws SQLException {
        if (nombreUsuario == null || nombreUsuario.isBlank()) {
            throw new IllegalArgumentException("El nombre de usuario es obligatorio.");
        }
        if (contrasena == null || contrasena.isBlank()) {
            throw new IllegalArgumentException("La contraseña es obligatoria.");
        }
        if (nombre == null || nombre.isBlank()) {
            throw new IllegalArgumentException("El nombre es obligatorio.");
        }
        if (apellido == null || apellido.isBlank()) {
            throw new IllegalArgumentException("El apellido es obligatorio.");
        }
        if (correo == null || correo.isBlank()) {
            throw new IllegalArgumentException("El correo es obligatorio.");
        }

        Dueno d = new Dueno(0, nombreUsuario, contrasena, nombre, apellido, correo, "DUENO");
        usuarioDAO.insertarDueno(d);
    }
}
